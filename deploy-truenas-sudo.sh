#!/bin/bash

# Script de d√©ploiement pour TrueNAS (Version sudo)
# Usage: sudo ./deploy-truenas-sudo.sh

set -e

echo "üè† D√©ploiement de Gestion de la Maison sur TrueNAS (Version Sudo)"
echo "================================================================="

# Configuration - utiliser le r√©pertoire courant
APP_NAME="gestion-maison"
APP_PORT="3001"
DATA_DIR="$(pwd)"
DOCKER_IMAGE="gestion-maison"

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rifier les pr√©requis
check_prerequisites() {
    log_info "V√©rification des pr√©requis..."
    
    # V√©rifier Docker
    if ! command -v docker &> /dev/null; then
        log_error "Docker n'est pas install√©. Veuillez l'installer d'abord."
        exit 1
    fi
    
    log_info "Docker trouv√© ‚úì"
    log_info "Pr√©requis v√©rifi√©s ‚úì"
}

# V√©rifier les fichiers essentiels
check_files() {
    log_info "V√©rification des fichiers..."
    
    # V√©rifier que le Dockerfile existe
    if [ ! -f "Dockerfile" ]; then
        log_error "Dockerfile non trouv√© dans $(pwd)"
        log_error "Fichiers pr√©sents :"
        ls -la
        exit 1
    fi
    
    # V√©rifier package.json
    if [ ! -f "package.json" ]; then
        log_error "package.json non trouv√©"
        exit 1
    fi
    
    log_info "Fichiers essentiels trouv√©s ‚úì"
}

# Cr√©er les dossiers n√©cessaires (sans chmod)
create_directories() {
    log_info "Cr√©ation des dossiers..."
    
    # Cr√©er les dossiers sans changer les permissions
    mkdir -p "$DATA_DIR/data" 2>/dev/null || log_warn "Dossier data d√©j√† existant"
    mkdir -p "$DATA_DIR/logs" 2>/dev/null || log_warn "Dossier logs d√©j√† existant"
    
    # V√©rifier que les dossiers existent
    if [ -d "$DATA_DIR/data" ] && [ -d "$DATA_DIR/logs" ]; then
        log_info "Dossiers cr√©√©s ‚úì"
    else
        log_error "Impossible de cr√©er les dossiers. V√©rifiez les permissions."
        exit 1
    fi
}

# D√©ploiement Docker simple
deploy_docker() {
    log_info "D√©ploiement avec Docker..."
    
    # Arr√™ter le conteneur existant s'il existe
    if docker ps -q -f name="$APP_NAME" | grep -q .; then
        log_info "Arr√™t du conteneur existant..."
        docker stop "$APP_NAME" || true
        docker rm "$APP_NAME" || true
    fi
    
    # Supprimer l'image existante
    if docker images -q "$DOCKER_IMAGE" | grep -q .; then
        log_info "Suppression de l'image existante..."
        docker rmi "$DOCKER_IMAGE" || true
    fi
    
    # Construire l'image
    log_info "Construction de l'image Docker..."
    log_info "R√©pertoire de travail : $(pwd)"
    docker build -t "$DOCKER_IMAGE" .
    
    # D√©marrer le conteneur
    log_info "D√©marrage du conteneur..."
    docker run -d \
        --name "$APP_NAME" \
        --restart unless-stopped \
        -p "$APP_PORT:$APP_PORT" \
        -p "3443:3443" \
        -v "$DATA_DIR/data:/app/server/data" \
        -v "$DATA_DIR/logs:/app/logs" \
        -e NODE_ENV=production \
        -e PORT="$APP_PORT" \
        "$DOCKER_IMAGE"
    
    log_info "D√©ploiement Docker termin√© ‚úì"
}

# Configuration r√©seau
configure_network() {
    log_info "Configuration r√©seau..."
    
    # Trouver l'IP de TrueNAS
    NAS_IP=$(hostname -I | awk '{print $1}')
    
    log_info "IP de TrueNAS d√©tect√©e: $NAS_IP"
    log_info "URL d'acc√®s: http://$NAS_IP:$APP_PORT"
    
    # V√©rifier si le port est ouvert
    if command -v netstat &> /dev/null; then
        if netstat -tlnp | grep -q ":$APP_PORT "; then
            log_info "Port $APP_PORT est ouvert ‚úì"
        else
            log_warn "Port $APP_PORT n'est pas ouvert. V√©rifiez votre pare-feu."
        fi
    fi
}

# V√©rification du d√©ploiement
verify_deployment() {
    log_info "V√©rification du d√©ploiement..."
    
    sleep 5
    
    # V√©rifier si le conteneur fonctionne
    if docker ps | grep -q "$APP_NAME"; then
        log_info "Conteneur en cours d'ex√©cution ‚úì"
    else
        log_error "Conteneur non d√©marr√©. V√©rifiez les logs."
        docker logs "$APP_NAME"
        return 1
    fi
    
    # V√©rifier si l'application r√©pond
    if curl -s "http://localhost:$APP_PORT/api/status" > /dev/null; then
        log_info "Application accessible ‚úì"
    else
        log_warn "Application non accessible imm√©diatement. V√©rifiez les logs."
        docker logs "$APP_NAME"
    fi
    
    # Afficher les logs r√©cents
    log_info "Logs r√©cents:"
    docker logs --tail=10 "$APP_NAME"
}

# Fonction principale
main() {
    check_prerequisites
    check_files
    create_directories
    deploy_docker
    configure_network
    verify_deployment
    
    log_info "D√©ploiement termin√© avec succ√®s ! üéâ"
    log_info "Acc√©dez √† votre application: http://$(hostname -I | awk '{print $1}'):$APP_PORT"
}

# Ex√©cuter le script
main "$@" 