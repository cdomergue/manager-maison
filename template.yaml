AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "Gestion de la Maison - API Backend"

Globals:
  Function:
    Timeout: 30
    Runtime: nodejs20.x
    Environment:
      Variables:
        TABLE_NAME: !Ref TasksTable
        CATEGORIES_TABLE_NAME: !Ref CategoriesTable
        SHOPPING_ITEMS_TABLE_NAME: !Ref ShoppingItemsTable
        SHOPPING_LIST_TABLE_NAME: !Ref ShoppingListTable
        NOTES_TABLE_NAME: !Ref NotesTable
  Api:
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Secret-Key,X-User-Id,Accept,Cache-Control'"
      AllowOrigin: "'*'"
      MaxAge: "'86400'"

Resources:
  # Tables DynamoDB
  TasksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: gestion-maison-tasks
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  NotesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: gestion-maison-notes
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  CategoriesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: gestion-maison-categories
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  ShoppingItemsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: gestion-maison-shopping-items
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  ShoppingListTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: gestion-maison-shopping-list
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # API Gateway
  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Secret-Key,X-User-Id,Accept,Cache-Control'"
        AllowOrigin: "'*'"
        MaxAge: "'86400'"

  # Lambda Functions
  GetStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handler.getStatus
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TasksTable
      Events:
        GetStatus:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api/status
            Method: get

  GetTasksFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handler.getTasks
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TasksTable
      Events:
        GetTasks:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api/tasks
            Method: get

  CreateTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handler.createTask
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TasksTable
      Events:
        CreateTask:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api/tasks
            Method: post

  UpdateTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handler.updateTask
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TasksTable
      Events:
        UpdateTask:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api/tasks/{id}
            Method: put

  DeleteTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handler.deleteTask
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TasksTable
      Events:
        DeleteTask:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api/tasks/{id}
            Method: delete

  CompleteTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handler.completeTask
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TasksTable
      Events:
        CompleteTask:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api/tasks/{id}/complete
            Method: post

  # ========== NOTES FUNCTIONS ==========
  GetNotesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handler.getNotes
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref NotesTable
      Events:
        GetNotes:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api/notes
            Method: get

  GetNoteFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handler.getNote
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref NotesTable
      Events:
        GetNote:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api/notes/{id}
            Method: get

  CreateNoteFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handler.createNote
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NotesTable
      Events:
        CreateNote:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api/notes
            Method: post

  UpdateNoteFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handler.updateNote
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NotesTable
      Events:
        UpdateNote:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api/notes/{id}
            Method: put

  DeleteNoteFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handler.deleteNote
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NotesTable
      Events:
        DeleteNote:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api/notes/{id}
            Method: delete

  ShareNoteFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handler.shareNote
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NotesTable
      Events:
        ShareNote:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api/notes/{id}/share
            Method: post

  # ========== FONCTIONS CATEGORIES ==========
  GetCategoriesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handler.getCategories
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CategoriesTable
      Events:
        GetCategories:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api/categories
            Method: get

  GetCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handler.getCategory
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref CategoriesTable
      Events:
        GetCategory:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api/categories/{id}
            Method: get

  CreateCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handler.createCategory
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CategoriesTable
      Events:
        CreateCategory:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api/categories
            Method: post

  UpdateCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handler.updateCategory
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CategoriesTable
      Events:
        UpdateCategory:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api/categories/{id}
            Method: put

  DeleteCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handler.deleteCategory
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CategoriesTable
      Events:
        DeleteCategory:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api/categories/{id}
            Method: delete

  # ========== SHOPPING LIST FUNCTIONS ==========
  GetShoppingItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handler.getShoppingItems
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ShoppingItemsTable
      Events:
        GetShoppingItems:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api/shopping/items
            Method: get

  CreateShoppingItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handler.createShoppingItem
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ShoppingItemsTable
      Events:
        CreateShoppingItem:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api/shopping/items
            Method: post

  UpdateShoppingItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handler.updateShoppingItem
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ShoppingItemsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ShoppingListTable
      Events:
        UpdateShoppingItem:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api/shopping/items/{id}
            Method: put

  DeleteShoppingItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handler.deleteShoppingItem
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ShoppingItemsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ShoppingListTable
      Events:
        DeleteShoppingItem:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api/shopping/items/{id}
            Method: delete

  GetShoppingListFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handler.getShoppingList
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ShoppingListTable
      Events:
        GetShoppingList:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api/shopping/list
            Method: get

  AddShoppingEntryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handler.addShoppingEntry
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ShoppingItemsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ShoppingListTable
      Events:
        AddShoppingEntry:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api/shopping/list
            Method: post

  UpdateShoppingEntryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handler.updateShoppingEntry
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ShoppingListTable
      Events:
        UpdateShoppingEntry:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api/shopping/list/{id}
            Method: put

  DeleteShoppingEntryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handler.deleteShoppingEntry
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ShoppingListTable
      Events:
        DeleteShoppingEntry:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api/shopping/list/{id}
            Method: delete

  ClearCheckedShoppingEntriesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handler.clearCheckedShoppingEntries
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ShoppingListTable
      Events:
        ClearCheckedShoppingEntries:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api/shopping/list/clear-checked
            Method: post

  ClearAllShoppingEntriesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handler.clearAllShoppingEntries
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ShoppingListTable
      Events:
        ClearAllShoppingEntries:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api/shopping/list
            Method: delete

  # CORS Options
  OptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handler.options
      Events:
        OptionsApiProxy:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api/{proxy+}
            Method: options
        OptionsApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api
            Method: options

Outputs:
  ApiGatewayUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/prod/"
    Export:
      Name: !Sub "${AWS::StackName}-ApiUrl"

  TasksTableName:
    Description: "DynamoDB table name"
    Value: !Ref TasksTable
    Export:
      Name: !Sub "${AWS::StackName}-TableName"

  CategoriesTableName:
    Description: "Categories DynamoDB table name"
    Value: !Ref CategoriesTable
    Export:
      Name: !Sub "${AWS::StackName}-CategoriesTableName"

  ShoppingItemsTableName:
    Description: "Shopping items DynamoDB table name"
    Value: !Ref ShoppingItemsTable
    Export:
      Name: !Sub "${AWS::StackName}-ShoppingItemsTableName"

  ShoppingListTableName:
    Description: "Shopping list DynamoDB table name"
    Value: !Ref ShoppingListTable
    Export:
      Name: !Sub "${AWS::StackName}-ShoppingListTableName"

  NotesTableName:
    Description: "Notes DynamoDB table name"
    Value: !Ref NotesTable
    Export:
      Name: !Sub "${AWS::StackName}-NotesTableName"
