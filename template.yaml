AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Gestion de la Maison - API Backend'

Globals:
  Function:
    Timeout: 30
    Runtime: nodejs20.x
    Environment:
      Variables:
        TABLE_NAME: !Ref TasksTable
        CATEGORIES_TABLE_NAME: !Ref CategoriesTable
  Api:
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Resources:
  # Tables DynamoDB
  TasksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: gestion-maison-tasks
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  CategoriesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: gestion-maison-categories
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # API Gateway
  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  # Lambda Functions
  GetStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handler.getStatus
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TasksTable
      Events:
        GetStatus:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api/status
            Method: get

  GetTasksFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handler.getTasks
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TasksTable
      Events:
        GetTasks:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api/tasks
            Method: get

  CreateTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handler.createTask
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TasksTable
      Events:
        CreateTask:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api/tasks
            Method: post

  UpdateTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handler.updateTask
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TasksTable
      Events:
        UpdateTask:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api/tasks/{id}
            Method: put

  DeleteTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handler.deleteTask
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TasksTable
      Events:
        DeleteTask:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api/tasks/{id}
            Method: delete

  CompleteTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handler.completeTask
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TasksTable
      Events:
        CompleteTask:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api/tasks/{id}/complete
            Method: post

  # ========== FONCTIONS CATEGORIES ==========
  GetCategoriesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handler.getCategories
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CategoriesTable
      Events:
        GetCategories:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api/categories
            Method: get

  GetCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handler.getCategory
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref CategoriesTable
      Events:
        GetCategory:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api/categories/{id}
            Method: get

  CreateCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handler.createCategory
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CategoriesTable
      Events:
        CreateCategory:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api/categories
            Method: post

  UpdateCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handler.updateCategory
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CategoriesTable
      Events:
        UpdateCategory:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api/categories/{id}
            Method: put

  DeleteCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handler.deleteCategory
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CategoriesTable
      Events:
        DeleteCategory:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api/categories/{id}
            Method: delete

  # CORS Options
  OptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handler.options
      Events:
        OptionsApi:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /api/{proxy+}
            Method: options

Outputs:
  ApiGatewayUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/prod/"
    Export:
      Name: !Sub "${AWS::StackName}-ApiUrl"
  
  TasksTableName:
    Description: "DynamoDB table name"
    Value: !Ref TasksTable
    Export:
      Name: !Sub "${AWS::StackName}-TableName"
  
  CategoriesTableName:
    Description: "Categories DynamoDB table name"
    Value: !Ref CategoriesTable
    Export:
      Name: !Sub "${AWS::StackName}-CategoriesTableName"